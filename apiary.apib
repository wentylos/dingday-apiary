FORMAT: 1A
HOST: https://api.dingday.cc

# DingDay API

Api urcene pro pristup ke sluzbam aplikace [dinday.cc](http://www.dingday.cc)

## Intro

Vetsina requestu na zdroje vyzaduje Basic HTTP Authentication, kazdy takovy je oznacen hlavickou "Authentication".

### <a name="autorizace"></a> Autorizace

U kazdeho requestu, ktery vyzaduje autorizaci pouzivejte [Base64](http://en.wikipedia.org/wiki/Base64) zakodovany string ve forme _"username:password"_. 
Neni tedy nutne se nijak hlasit, nepracujeme s autorizacnimi tokeny. Kazdy request se autorizuje zvlast.

#### Testovani

Pro ucely testovani a tohoto MOCu pouzivejte jako Autorization string 'QWxhZGRpbjpvcGVuIHNlc2FtZQ=='. S kazdym requestem je tedy treba zaslat hlavicku

    Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==


### Podporujeme tyto HTTP metody: 

    GET - ziskani dat zdroje - u seznamu podporuje since, offset, limit, search
    POST - vytvoreni noveho zaznamu zdroje
    PUT - update zdroje - vyzaduje ID
    DELETE - mazani zdroje - vyzaduje ID
    
### Monžné odpovědi serveru:

* 200 ```OK``` the request was successful (some API calls may return 201 instead).
* 201 ```Created``` - the request was successful and a resource was created.
* 204 ```No Content``` - the request was successful but there is no representation to return (i.e. the response is empty).
* 400 ```Bad Request``` - the request could not be understood or was missing required parameters.
* 401 ```Unauthorized``` - authentication failed or user doesn't have permissions for requested operation.
* 403 ```Forbidden``` - access denied.
* 404 ```Not Found``` - resource was not found.
* 405 ```Method Not Allowed``` - requested method is not supported for resource.
* 500 ```Internal Server Error``` - there were an error while processing your request on server site.

### <a name="UUID"></a> Generovani ID UUID

TODO

### <a name="timestamp"></a> Timestamp - urceni data a casu

Pro formatovani data a casu pouzivame retezec ve formatu [ISO 8601](http://en.wikipedia.org/wiki/ISO_8601). Vsechny casy zasilane na server a vracene serverem jsou v casove zone [UTC](http://en.wikipedia.org/wiki/UTC).

Timestamp v jinych casovych zonach bude pred ulozenim na serveru vzdy preveden do UTC.

Timestamp s chybejici casovou zonou bude pred ulozenim na serveru doplnen do UTC.

Ukazky (vse jsou ekvivalentni)
 
* __2014-04-25T23:41:14Z__ 
* __2014-04-25T23:41:14+00:00__
* __2014-04-25T23:41:14__ - TODO - bacha toto dle ISO neni ekvivalentni dvema predchozim -> je to lokalni cas bez urceni cas. zony.


### <a name="date"></a> Date - urceni data

Date jako podmnozina Timestamp se ridi stejnymi pravidli jako timestamp. [Vice o formatu timestamp](#timestamp).

U data neni podpora pro casove zony.

Ukazky (obe jsou ekvivalentni)
 
* __2014-04-25__ 

### <a name="search"></a> Search - semi-fultextove vyhledavani

Zdroje podproujici vyhledavani maji parametr search. U konkretniho zdroje je vzdy uvedeno, v jakych atributech entity hleda. 

Na vstup mozno zaslat libovolny retezec, i vice slove, mozno pouzivat wildcard.

U vice slov dojde k jejich rozdeleni podle bilych znaku a hledani kazde casti samostatne. Prebytecne mezery na zacatku a na konci kazdeho retezece, jsou odstraneny.

Podporovane wildcard:

* * - 0 - n libovolnych znaku
* ? - jeden libovolny znak

### <a name="since"></a> Since - rozdilove prirustky

Since slouzi k omezeni zasilanych dat mezi klientem a serverem. Kazdy klient si muze pamatovat datum posledni aktualizace dat ze serveru. Pri zaslani since na zdroje, ktere toto podporuji, server vrati jen entity modifikovane po tomto datu. Lze tak ziskavat pouze prirustky zmen v danem zdroji.

Since je ve formatu timestamp, [vice o formatu timestamp](#timestamp).

Pouziti since neni vylucne z zadnym dalsi parametrem zdroje (neni li uvedeno jinak). Lze tedy napr. kombinovat since i search.

### <a name="colors"></a> Barvy

V mistech kde se vyskutuje parametr *color* je dostupna pouze stringova konstanta, ktera reprezentuje lidsky citelnou hodnotu barvy, jedna z hodnot nize. Kde konkretni prirazeni barvy probiha na urovni klientske aplikace. V seznamu nize jsou v zavorce uvedny doporucene HEXa kody barve. 

* BLACK - (#000000)
* GREEN - (#00FF00)
* LIGHT_GREEN - (#78AB46)
* RED - (#FF0000)

# Group Uzivatel
<a name="users"></a>
Zdroje pro zpristupneni informaci o uzivateli, prihlaseni, registraci, editaci profilu.

## Autorizace
TODO - jen nekde
Basic HTTP Authentication. Pro vice informaci viz kapitola [Autorizace](#autorizace)

# Group Assety

<a name="assets"></a>
Asset je blok dat různého typy přičleněný buď k úkolu nebo projektu.

Zdroje pro zpristupneni assetu prihlaseneho uzivatele.

## Autorizace

Basic HTTP Authentication. Pro vice informaci viz kapitola [Autorizace](#autorizace).

## Zavislost na tasku/projektu

Asset sam o sobe neexistuje, je zavisly na tasku nebo projektu kteremu je prirazen. 
Proto jsou vsechny manipulace s assetem prefixovany [/tasks/{taskID}/assets](#task-assets) pripadne [/projects/{projectID}/assets](#project-assets) 
a definice prislusnych zdroju najdete u tasku a projektu.

## <a name="asset-types"></a> Typy assetu

Parametru *type* kazdeho assetu nese stringovou identifikaci typu assetu. Assetum podle typu je treba na urovni klientu pridat sematnitku. Podporujeme tyto typy assetu:

+ [NOTE](#asset-type-note)
+ [REMINDER](#asset-type-reminder) 
+ [SCHEDULED_FOR](#asset-type-scheduled-for)
+ [DEADLINE](#asset-type-deadline)
+ [TODO](#asset-type-todo)
+ [ADDRESS](#asset-type-address)
+ [TAG](#asset-type-tag)
+ [PROJECT](#asset-type-project)

## Parametry entity asset:

Parametry uvedene zde nize maji vsechny assety.

+ id (int) : unikátní UUID ukolu - [vice o UUID](#uuid)
+ type (string) : enum - vyctovy typ, jeden z typu ukolu - [vice o typech assetu](#asset-types)
+ lastModified (timestamp) : cas posledni modifikace [vice o formatu timestamp](#timestamp) 
+ created (timestamp) : cas vytvoreni [vice o formatu timestamp](#timestamp)

Konkretni assety maji specificke parametry, viz seznam u konkretniho assetu. 
Dle typu assetu klientska aplikace vi, jake parametry jsou pro dany asset dostupne.

###  Asset NOTE
<a name="asset-type-note"></a>
Textové políčko, které mohou upravovat všichni uživatelé, kterým je úkol sdílen.

#### Parametry 
+ title (string) : nazev poznamky
+ body (string) : telo poznamky

### Asset REMINDER
<a name="asset-type-reminder"></a>
Datum [čas], kdy se má úkol připomenout.

#### Parametry 
+ date (timestamp) : datum pripomenuti [vice o formatu timestamp](#timestamp)

### Asset SCHEDULED_FOR
<a name="asset-type-scheduled-for"></a>
 Den [čas] na kdy je úkol naplánován.

#### Parametry 
+ date (timestamp) : datum naplanovani [vice o formatu timestamp](#timestamp)

### Asset DEADLINE
<a name="asset-type-deadline"></a>
Datum [čas] do kdy musí být úkol dokončen. 

#### Parametry 
+ date (timestamp) : datum dokonceni [vice o formatu timestamp](#timestamp)

### Asset TODO
<a name="asset-type-todo"></a>
Seznam položek, které musí být provedeny. 

#### Parametry 
+ title (string) : nazev seznamu
+ items (list) : [polozky](#asset-type-todo-items)

#### Parametry jedne polozky
<a name="asset-type-todo-items"></a>

+ id (int) : unikátní UUID zaznamu - [vice o UUID](#uuid)
+ title (string) : název ukolu
+ isDone (boolean) : je ukol hotovy?
+ lastModified (timestamp) : cas posledni modifikace [vice o formatu timestamp](#timestamp) 
+ created (timestamp) : cas vytvoreni [vice o formatu timestamp](#timestamp)

### Asset ADDRESS
<a name="asset-type-address"></a>
 Adresa místa. 

#### Parametry 
+ title (string) : adresa, libovolny retezec
+ gps (string) : gps souradnice dohledane pro dany nazev

### Asset TAG
<a name="asset-type-tag"></a>
Seznam tagů přidělených k úkolu. [Vice o tagech](#tags).

#### Parametry 
+ items (list) : prirazene tagy, formatu 
[viz parametry tagu](#tags)

### Asset PROJECT
<a name="asset-type-project"></a>
Projekt, ke kterému úkol náleží. [Vice o projektech](#projects).

#### Parametry 
+ project (project) : prirazeny projekt [Viz parametry projektu](#projects)

# Group Ukoly
<a name="tasks"></a>
Úkol je připomínka činnosti, kterou musí uživatel provést/delegovat/odložit/smazat.

Zdroj pro zpristupneni ukolu prihlaseneho uzivatele. 

## Autorizace

Basic HTTP Authentication. Pro vice informaci viz kapitola [Autorizace](#autorizace).

## <a name="task-status"></a> Stav ukolu

Vyctovy typ. Parametr *status* kazdeho tasku nese informaci o stavu tasku dle hodnot stringovych identifikaci stavu. Stavum je treba na urovni klientu pridat sematnitku. Podporujeme tyto stavy:

+ NEW
+ SCHEDULED
+ CALENDAR
+ COMPLETED
+ TODO - jake jeste?

## Parametry entity task:

+ id (int) : unikátní UUID zaznamu - [vice o UUID](#uuid)
+ title (string) : název ukolu
+ status (enum) : stav, hodnota vyctoveho typu status, stav ve kterem se ukol nachazi - [vice o stavech ukolu](#task-statuses)
+ assets (list) : kolekce assetu projektu - [vice o assetech](#task-assets-list)
+ isDone (boolean) : je ukol hotovy?
+ lastModified (timestamp) : cas posledni modifikace [vice o formatu timestamp](#timestamp) 
+ created (timestamp) : cas vytvoreni [vice o formatu timestamp](#timestamp)

## Task [/tasks/{id}{?withAssets}]

Jeden konkretni task a manipulace s nim. 

+ Parameters
    + id (required, string) ... UUID zaznamu ktery ma byt ziskan/updatovan
    + withAssets = `true` (optional, boolean) ... zda expandovat vsechny assety ukolu. Pokud je true, bude parametru *assets* obshovat [expandovanou kolekci assetu](#task-assets-list)
    
+ Model (application/json)

    JSON reprezentace jednoho Ukolu. 

    + Body
    
            {
                "id": 6, 
                "title": "Mesicni nakup"
                "status": "SCHEDULED"
                "assets": null
                "isDone": false
                "lastModified": "2014-11-26T11:08:09Z"
                "created": "2014-11-26T11:08:09Z"
            }

### Info o ukolu [GET]

Umoznuje ziskat detailni informace o jednom ukolu

+ Request
    + Headers
    
            Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==

+ Response 200
    
    [Task][]

## Task Asset [/tasks/{taskId}/assets/{id}]

<a name="task-assets"></a>
Jeden konkretni asset daneho ukolu a manipulace s nim.

+ Parameters
    + taskId (required, string) ... UUID tasku kteremu asset patri
    + id (required, string) ... UUID zaznamu - assetu ktery ma byt ziskan/updatovan

+ Model (application/json)

    JSON reprezentace jednoho Assetu. 

    + Body
    
            {
                "id": 1 
                "type": "NOTE"
                "lastModified": "2014-11-26T11:08:09Z"
                "created": "2014-11-26T11:08:09Z"
                "title": "Kino"
                "body": "Nekde jsem videl ze bude novy James Bond, kouknot kdy bude v kine"
            }

### Info o konkretnim assetu [GET]

Umoznuje ziskat detailni informace o jednom assetu

+ Request
    + Headers
    
            Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==

+ Response 200
    
    [Task Asset][]

## Task assets list [/tasks/{taskId}/assets/{?since,search,limit,offset}]

<a name="task-assets-list"></a>
Kolekce assetu daneho tasku. [Vice o assetech](assets)
    
+ Model (application/json)

    JSON reprezentace kolekce Assetu. 

    + Body
    
            [{
                "id": 1 
                "type": "NOTE"
                "lastModified": "2014-11-26T11:08:09Z"
                "created": "2014-11-26T11:08:09Z"
                "title": "Kino"
                "body": "Nekde jsem videl ze bude novy James Bond, kouknot kdy bude v kine"
            }, {
                "id": 2 
                "type": "REMINDER"
                "lastModified": "2014-11-26T11:08:09Z"
                "created": "2014-11-26T11:08:09Z"
                "date": "2014-10-10T08:00:00Z"
            }, {
                "id": 3 
                "type": "SCHEDULED_FOR"
                "lastModified": "2014-11-26T11:08:09Z"
                "created": "2014-11-26T11:08:09Z"
                "date": "2014-10-10T08:00:00Z"
            }, {
                "id": 3 
                "type": "DEADLINE"
                "lastModified": "2014-11-26T11:08:09Z"
                "created": "2014-11-26T11:08:09Z"
                "date": "2014-10-10T20:00:00Z"
            }, {
                "id": 4 
                "type": "TODO"
                "lastModified": "2014-11-26T11:08:09Z"
                "created": "2014-11-26T11:08:09Z"
                "title": "Co musim udelet?"
                "items": [{
                    "id": 1 
                    "title": "Zjistit o cem je film"
                    "isDone": "true"
                    "lastModified": "2014-11-26T11:08:09Z"
                    "created": "2014-11-26T11:08:09Z"
                }, {
                    "id": 2 
                    "title": "Najit kino"
                    "isDone": "false"
                    "lastModified": "2014-11-26T11:08:09Z"
                    "created": "2014-11-26T11:08:09Z"
                }, {
                    "id": 3 
                    "title": "Zjistit zda ma Zuzka cas"
                    "isDone": "false"
                    "lastModified": "2014-11-26T11:08:09Z"
                    "created": "2014-11-26T11:08:09Z"
                }, {
                    "id": 4 
                    "title": "Rezervovat listky"
                    "isDone": "false"
                    "lastModified": "2014-11-26T11:08:09Z"
                    "created": "2014-11-26T11:08:09Z"
                }]
            }, {
                "id": 5
                "type": "ADDRESS"
                "lastModified": "2014-11-26T11:08:09Z"
                "created": "2014-11-26T11:08:09Z"
                "title": "Velky spalicek Brno"
                "gps": "49.1931944°, 016.6059722°"
            }, {
                "id": 6 
                "type": "TAG"
                "lastModified": "2014-11-26T11:08:09Z"
                "created": "2014-11-26T11:08:09Z"
                "items": [{
                    "id": 1 
                    "title": "Babicka a Deda"
                    "lastModified": "2014-11-26T11:08:09Z"
                    "created": "2014-11-26T11:08:09Z"
                    "color": "BLACK"
                }, {
                    "id": 2 
                    "title": "Manzelka"
                    "lastModified": "2014-11-26T11:08:09Z"
                    "created": "2014-11-26T11:08:09Z"
                    "color": "RED"
                }]
            }, {
                "id": 7 
                "type": "PROJECT"
                "lastModified": "2014-11-26T11:08:09Z"
                "created": "2014-11-26T11:08:09Z"
                "project": {
                    "id": 1 
                    "title": "Projekt 1"
                    "lastModified": "2014-05-27T11:08:09Z"
                    "created": "2014-03-10T11:08:09Z"
                }
            }]

### Vypis vsechny assetu [GET] 

+ Parameters
    + taskId (required, string) ... UUID ukolu jehoz assety maji byt ziskany
    + since (optional, string, `2014-01-01T12:00:00Z`) ... timestamp ([vice o formatu timestamp](#timestamp)), vraci jen zaznamy zmenen po datu since. [Vice o fungovani since.](#since)
    + limit (optional, int, `10`) ... omezeni poctu zaznamu
    + offset (optional, int, `30`) ... ofset ve vyhledavani
    + search (optional, string, `Hledany retezec`) ... semi-fulltextove vyhledavani, u tohoto zdroje hleda v *title*. [Vice o formatu vyhledavani](#search)

+ Request
    + Headers
    
            Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==

+ Response 200
    
    [Task assets list][]


# Group Tagy

<a name="tags"></a>
Tag je listecek, popisek prirazeny k tasku pres asset typu *AssetTag*

Zdroje pro zpristupneni tagu prihlaseneho uzivatele. 

## Autorizace
Basic HTTP Authentication. Pro vice informaci viz kapitola [Autorizace](#autorizace)

## Parametry entity tag:

+ id (string) : unikátní UUID zaznamu - [vice o UUID](#uuid)
+ title (string) : název projektu
+ lastModified (timestamp) : cas posledni modifikace [vice o formatu timestamp](#timestamp) 
+ created (timestamp) : cas vytvoreni [vice o formatu timestamp](#timestamp)
+ color (enum) : barva, hodnota vyctoveho typu [vice o barvach](#colors)

## Tag [/tags/{id}]

Jeden konkretni tag a manipulace s nim. 
    
+ Model (application/json)

    JSON reprezentace jednoho Tagu. 

    + Body
    
            {
                "id": 3 
                "title": "Babicka a Deda"
                "lastModified": "2014-11-26T11:08:09Z"
                "created": "2014-11-26T11:08:09Z"
                "color: "BLACK"
            }

+ Parameters
    + id (required, string) ... UUID zaznamu ktery ma byt ziskan/updatovan
    
### Info o tagu [GET]

Umoznuje ziskat detailni informace o jednom tagu

+ Request
    + Headers
    
            Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==

+ Response 200
    
    [Tag][]

### Editovat tagu [PUT]

Updatuje editovat jeden tagu, editovat lze vsechny parametry tagu, krom *generovanych serverem*

+ Request
    + Headers
    
            Content-type: application/json
            Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==

    + Body
    
            {
                "title": "Upraveny nazev tagu"
            }

+ Response 200
    
    [Tag][]

### Vytvořit nový tag [POST]

Vytvori novy tag pro prihlaseneho uzivatele

+ Request
    + Headers
    
            Content-type: application/json
            Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==

    + Body
    
            { 
                "title": "Babicka a Deda" 
            }

+ Response 201 (application/json)

    [Tag][]

### Smazat tag [DELETE]

+ Request
    + Headers
    
            Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==

+ Response 204

## Tags list [/tags{?since,search,limit,offset}]

Kolekce tagu

+ Model (application/json)

    JSON reprezentace kolekce Tagu. 
    
       + Body

            [{
                "id": 1 
                "title": "Babicka a Deda"
                "lastModified": "2014-11-26T11:08:09Z"
                "created": "2014-11-26T11:08:09Z"
                "color: "BLACK"
            }, {
                "id": 2 
                "title": "Manzelka"
                "lastModified": "2014-11-26T11:08:09Z"
                "created": "2014-11-26T11:08:09Z"
                "color: "RED"
            }, {
                "id": 3 
                "title": "Milenka"
                "lastModified": "2014-11-26T11:08:09Z"
                "created": "2014-11-26T11:08:09Z"
                "color: "LIGHT_GREEN"
            }]
            
### Vypis vsechny tagy [GET] 

+ Parameters
    + since (optional, string, `2014-01-01T12:00:00Z`) ... timestamp ([vice o formatu timestamp](#timestamp)), vraci jen zaznamy zmenen po datu since. [Vice o fungovani since.](#since)
    + limit (optional, int, `10`) ... omezeni poctu zaznamu
    + offset (optional, int, `30`) ... ofset ve vyhledavani
    + search (optional, string, `Hledany retezec`) ... semi-fulltextove vyhledavani, u tagu hleda v *title*, [Vice o formatu vyhledavani](#search)
 
+ Request
    + Headers
    
            Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==

+ Response 200 (application/json)

    [Tags list][]   

# Group Kalendar/Terminy
<a name="terms"></a>
Zdroje pro zpristupneni kalendare prihlaseneho uzivatele. 

Kalendar se sklada ze dnu. Den/termin je spojen s ukolem skrze asset typu:

+ asset __scheduled for__ a tedy s kategorií “scheduled”.
+ asset __deadline__ pro tento den
+ asset __repeat__, který zahrnuje tento den.je připomínka činnosti, kterou musí uživatel provést/delegovat/odložit/smazat.

##Pridani ukolu do kalendare
Pridani ukolu do kalendare zpusobuje pridani jednoho z assetu vyse, k danemu ukolu. Novy ukol je zarazen do kalendare vzdy na zacatek seznamu ukolu pro dany den.

__Akce POST neni podporovana. PUT slouzi pouze k update poradi.__

## Autorizace
Basic HTTP Authentication. Pro vice informaci viz kapitola [Autorizace](#autorizace)

## Parametry entity term:

+ date (timestamp) : planovane datum [vice o formatu date](#date) 
+ tasks (array) : pole UUID tasku nebo pole kompletnich task - v zavislosti na parametru __fullTasks__ [vice o tasku](#tasks)
+ lastModified (timestamp) : cas posledni modifikace [vice o formatu timestamp](#timestamp) 
+ created (timestamp) : cas vytvoreni [vice o formatu timestamp](#timestamp)

## Terms list [/terms/{date_from}/{date_to}{?fullTasks,withAssets}]

Kolekce termu

+ Model (application/json)

    JSON reprezentace jednoho Termu. 
    
       + Body

            [{
                "date": "2014-10-10"
                "lastModified": "2014-11-26T11:08:09Z"
                "created": "2014-11-26T11:08:09Z"
                "tasks": [1, 2, 3, 4, 5]
            }, {
                "date": "2014-10-12"
                "lastModified": "2014-11-26T11:08:09Z"
                "created": "2014-11-26T11:08:09Z"
                "tasks": [7]
            }, {
                "date": "2014-10-13"
                "lastModified": "2014-11-26T11:08:09Z"
                "created": "2014-11-26T11:08:09Z"
                "tasks": [{
                    "id": 6, 
                    "title": "Mesicni nakup"
                    "status": "CALENDAR"
                    "assets": [{
                        "id": 1 
                        "type": "NOTE"
                        "lastModified": "2014-11-26T11:08:09Z"
                        "created": "2014-11-26T11:08:09Z"
                        "title": "Kino"
                        "body": "Nekde jsem videl ze bude novy James Bond, kouknot kdy bude v kine"
                    }, {
                        "id": 3 
                        "type": "SCHEDULED_FOR"
                        "lastModified": "2014-11-26T11:08:09Z"
                        "created": "2014-11-26T11:08:09Z"
                        "date": "2014-10-13"
                    }]
                    "isDone": false
                    "lastModified": "2014-11-26T11:08:09Z"
                    "created": "2014-11-26T11:08:09Z"
                }, {
                    "id": 8, 
                    "title": "Mesicni nakup"
                    "status": "CALENDAR"
                    "assets": [{
                        "id": 10 
                        "type": "SCHEDULED_FOR"
                        "lastModified": "2014-11-26T11:08:09Z"
                        "created": "2014-11-26T11:08:09Z
                        "date": "2014-10-13"
                    }, {
                        "id": 6 
                        "type": "TAG"
                        "lastModified": "2014-11-26T11:08:09Z"
                        "created": "2014-11-26T11:08:09Z"
                        "items": [{
                            "id": 1 
                            "title": "Babicka a Deda"
                            "lastModified": "2014-11-26T11:08:09Z"
                            "created": "2014-11-26T11:08:09Z"
                            "color": "BLACK"
                        }, {
                            "id": 2 
                            "title": "Manzelka"
                            "lastModified": "2014-11-26T11:08:09Z"
                            "created": "2014-11-26T11:08:09Z"
                            "color": "RED"
                        }]
                    }]
                    "isDone": false
                    "lastModified": "2014-11-26T11:08:09Z"
                    "created": "2014-11-26T11:08:09Z"
                }]
            }] 
            
            
### Ziskani ukolu pro dany den [GET] 

+ Parameters 
    + date_from (required, date_from, `2014-02-01`) ... datum od, pro urceni leve hranice rozsahu data. Neni-li uvedeno *date_from*, vraci ukoly jen pro dany den *date_to*. [Vice o formatu data](#date) 
    + date_to (optional, date_to, `2014-02-01`) ... datum do, pro urceni prave hranice rozsahu data. Neni-li uvedeno, vraci ukoly jen pro dany den *date_from*. [Vice o formatu data](#date) 
    + fullTasks = `false` (optional, boolean, `false`) ... zda expandovat vsechny tasky. Pokud je true, bude parametr *tasks* obshovat expandovanou kolekci tasku. [Vice o tasku](#task)
    + withAssets = `true` (optional, boolean, `true`) ... zda expandovat vsechny assety ukolu. Pokud je true, bude parametr *assets* obshovat [expandovanou kolekci assetu](#task-assets-list)

+ Request
    + Headers
    
            Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==

+ Response 200 (application/json)

    [Terms list][]   

## Terms rank [/terms/{date}]

Kolekce termu

Zdroj urceny pro zmenu poradi ukolu pro dany den. 
    
### Zmena poradi ukolu pro dany den [PUT] 

Ocekava pole UUID ukolu v danem poradi. 

Poradi ukolu na serveru zmergnuje, vznik-li konflikt podle strategie nize. Server vraci seznam termu pro dany den. 

Strategie mergovani: __posledni vyhrava__.

+ Parameters
    + date (required, date, `2014-01-01`)  ... date, urcuje zaznamy pro dany den,  [vice o formatu date](#date)

+ Request
    + Headers
    
            Content-type: application/json
            Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==

    + Body
    
            {
                "date": "2014-10-10"
                "tasks": [1, 2, 3, 4, 5]
            }

+ Response 200 (application/json)
        
        {
            "date": "2014-10-10"
            "lastModified": "2014-11-26T11:08:09Z"
            "created": "2014-11-26T11:08:09Z"
            "tasks": [1, 2, 3, 4, 5]
        }
    
    
# Group Kategorie
<a name="categories"></a>
Zdroje pro zpristupneni ukolu s poradim v dane kategorii, aktualizaci poradi ukolu v kategorii pro prihlaseneho uzivatele.

## <a name="categories-list"></a> Kategorie

Pro kazdou hodnotu z vyctoveho typu nize, existuje vlastni zdroj pro zpristupneni poradi ukolu v dane kategorii, viz parametr *{category}*.

Podporovane kategorie:

+ INBOX
+ NEXT
+ SCHEDULED
+ WAITING_FOR
+ SUSPENDED
+ COMPLETED

## Autorizace
Basic HTTP Authentication. Pro vice informaci viz kapitola [Autorizace](#autorizace)

## Parametry entity category:

+ title (string) : nazev kategorie [vice o kategoriich ukolu](#task-categories) 
+ tasks (array) : pole UUID tasku nebo pole kompletnich task - v zavislosti na parametru __fullTasks__ [vice o tasku](#tasks)
+ lastModified (timestamp) : cas posledni modifikace [vice o formatu timestamp](#timestamp) 
+ created (timestamp) : cas vytvoreni [vice o formatu timestamp](#timestamp)

## Category task list [/categories/{category}/{?since,fullTasks,withAssets}]

Entita kategorie s kolekci ukolu.


+ Model (application/json)

    JSON reprezentace jedne Kategorie. 
    
       + Body

            {
                "title": "INBOX"
                "lastModified": "2014-11-26T11:08:09Z"
                "created": "2014-11-26T11:08:09Z"
                "tasks": [1, 2, 3, 4, 5]
            } 
            
            
### Ziskani ukolu pro kategorii INBOX [GET] 

+ Parameters
    + category (required, string `INBOX`) ... kategorie jedna z hodnot vyctoveho typu kategorii [vice o typu kategorie](#categories-list) 
    + since (optional, string, `2014-01-01T12:00:00Z`) ... timestamp ([vice o formatu timestamp](#timestamp)), vraci jen zaznamy zmenen po datu since. [Vice o fungovani since.](#since).
    + fullTasks = `false` (optional, boolean, `false`) ... zda expandovat vsechny tasky. Pokud je true, bude parametr *tasks* obshovat expandovanou kolekci tasku. [Vice o tasku](#task)
    + withAssets = `true` (optional, boolean, `true`) ... zda expandovat vsechny assety ukolu. Pokud je true, bude parametr *assets* obshovat [expandovanou kolekci assetu](#task-assets-list)

+ Request
    + Headers
    
            Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==

+ Response 200 (application/json)

    [Category task list][]   

## Categories rank [/categories/{category}]

Kolekce entit kategorii.

Zdroj urceny pro zmenu poradi ukolu v dane kategorie. 

    
### Zmena poradi ukolu v dane kategorie.  [PUT] 

Ocekava pole UUID ukolu v danem poradi. 

Poradi ukolu na serveru zmergnuje, vznik-li konflikt. Server vraci seznam ukolu pro danoou kategorii a pro dany den. 

Strategie mergovani: __posledni vyhrava__.

#### TODO - SMAZAT po konzultaci s Hanysem - Aktualizace zarazeni ukolu do/z kategorie

__Pridani__: Pokud dany ukol neni v kategorii pro ktere prijde jeho poradi, bude do kategorie zarazen.

__Odebrani__: Pokud nejaky ukol je v kategorii pro ktere prijde poradi, a dany ukol neni mezi UUID na vstupu, je z dane kategorie odebran.

__Omezeni__: Plati ze ukol je vzdy aspon v jedne kategorii. Pokud by mel ukol zustat bez kategorie, automaticky spadne zpet do kategorie INBOX.



+ Parameters
    + category (required, string `INBOX`) ... kategorie jedna z hodnot vyctoveho typu kategorii [vice o kategoriich ukolu](#task-categories) 
    
+ Request
    + Headers
    
            Content-type: application/json
            Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==

    + Body
    
            {
                "category": "INBOX""
                "tasks": [1, 2, 3, 4, 5]
            }

+ Response 200 (application/json)

    [Category task list][]  

# Group Projekty
<a name="projects"></a>
Projekt umoznuje seskupovat tasky do logickych skupin. 

Zdroje pro zpristupneni projektu prihlaseneho uzivatele. 

## Autorizace
Basic HTTP Authentication. Pro vice informaci viz kapitola [Autorizace](#autorizace)

## Parametry entity project:

+ id (string) : unikátní UUID zaznamu - [vice o UUID](#uuid)
+ title (string) : název projektu
+ lastModified (timestamp) : cas posledni modifikace [vice o formatu timestamp](#timestamp) 
+ created (timestamp) : cas vytvoreni [vice o formatu timestamp](#timestamp)


## Project [/projects/{id}]

Jeden konkretni projekt a manipulace s nim. 
    
+ Model (application/json)

    JSON reprezentace jednoho Projektu. 

    + Body
    
            {
                "id": 3 
                "title": "Projekt 3"
                "lastModified": "2014-11-26T11:08:09Z"
                "created": "2014-11-26T11:08:09Z"
            }

+ Parameters
    + id (required, string) ... UUID zaznamu ktery ma byt ziskan/updatovan
    
### Info o projektu [GET]

Umoznuje ziskat detailni informace o jednom projektu

+ Request
    + Headers
    
            Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==

+ Response 200
    
    [Project][]

### Editovat projekt [PUT]

Updatuje editovat jeden projekt, editovat lze vsechny parametry projektu, krom *generovanych serverem*

+ Request
    + Headers
    
            Content-type: application/json
            Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==

    + Body
    
            {
                "title": "Upraveny titulek"
            }

+ Response 200
    
    [Project][]

### Vytvořit nový projekt [POST]

Vytvori novy projekt pro prihlaseneho uzivatele

+ Request
    + Headers
    
            Content-type: application/json
            Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==

    + Body
    
            { 
                "title": "Projekt 3" 
            }

+ Response 201 (application/json)

    [Project][]

### Smazat projekt [DELETE]

+ Request
    + Headers
    
            Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==

+ Response 204

## Projects list [/projects{?since,search,limit,offset}]

Kolekce projektu

+ Model (application/json)

    JSON reprezentace jednoho Projektu. 
    
       + Body

            [{
                "id": 1 
                "title": "Projekt 1"
                "lastModified": "2014-05-27T11:08:09Z"
                "created": "2014-03-10T11:08:09Z"
            }, {
                "id": 2 
                "title": "Projekt 2"
                "lastModified": "2014-05-27T11:08:09Z"
                "created": "2014-03-15T11:08:09Z"
            }, {
                "id": 3 
                "title": "Projekt 3"
                "lastModified": "2014-03-27T11:08:09Z"
                "created": "2014-03-20T11:08:09Z"
            }]
            
### Vypis vsechny projekty [GET] 

+ Parameters
    + since (optional, string, `2014-01-01T12:00:00Z`) ... timestamp ([vice o formatu timestamp](#timestamp)), vraci jen zaznamy zmenen po datu since. [Vice o fungovani since.](#since)
    + limit (optional, int, `10`) ... omezeni poctu zaznamu
    + offset (optional, int, `30`) ... ofset ve vyhledavani
    + search (optional, string, `Hledany retezec`) ... semi-fulltextove vyhledavani, u projektu hleda v *title*, [Vice o formatu vyhledavani](#search)
 
+ Request
    + Headers
    
            Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==

+ Response 200 (application/json)

    [Projects list][]   
    
